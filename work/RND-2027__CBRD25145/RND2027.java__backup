package youngjinj.HelloWorld;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;

/*-
 * "DB_URL", "DB_ID", "DB_PW", "TEST_COUNT" need to be modified.
 * 
 * $ javac RND2027.java
 * $ java RND2027
 */

/*-
 * (gdb) break ../src/compat/db_vdb.c:1802
 * (gdb) break ../src/parser/xasl_generation.c:16292
 * (gdb) break ../src/parser/xasl_generation.c:16476
 * (gdb) break ../src/parser/xasl_generation.c:16519
 * (gdb) break ../src/query/list_file.c:3852
 * 
 * (gdb) watch ((XASL_NODE *) 0x29978b0)->aptr_list->outptr_list->valptr_cnt
 * (gdb) watch ((XASL_NODE *) 0x29978b0)->aptr_list->list_id->type_list.type_cnt
 * (gdb) watch key_info_p->key[0].col
 * (gdb) watch input_scan_p->list_id.type_list.type_cnt
 * 
 * (gdb) info breakpoints
 *
 *     Num     Type           Disp Enb Address            What
 *     1       breakpoint     keep y   0x00007f8317e1c6b4 in db_execute_and_keep_statement_local at ../src/compat/db_vdb.c:1802
 *       -> statement = session->statements[stmt_ndx]
 *       
 *     2       breakpoint     keep y   0x00007f8317fdcc7c in pt_to_buildlist_proc at ../src/parser/xasl_generation.c:16292
 *       -> pt_expand_analytic_node
 *       
 *     3       breakpoint     keep y   0x00007f8317fdd24d in pt_to_buildlist_proc at ../src/parser/xasl_generation.c:16476
 *       -> pt_substitute_analytic_references
 *       
 *     4       breakpoint     keep y   0x00007f8317fdd3ac in pt_to_buildlist_proc at ../src/parser/xasl_generation.c:16519
 *       -> buildlist->a_outptr_list_ex.valptr_cnt
 *       
 *     5       breakpoint     keep y   0x00007f97f80a937b in qfile_make_sort_key at ../src/query/list_file.c:3852
 *       -> key_info_p->key[0].col < input_scan_p->list_id.type_list.type_cnt
 *
 * (gdb) -exec x/64xbt tuple_record_p->tpl
 *
 * <QFILE_TUPLE_HEADER>
 * +-----------------------------------------------------------------------+
 * |      1 |      2 |      3 |      4 |      5 |      6 |      7 |      8 |
 * +-----------------------------------------------------------------------+
 * | QFILE_TUPLE_LENGTH_OFFSET         | QFILE_TUPLE_PREV_LENGTH_OFFSET    | 8byte
 * +-----------------------------------------------------------------------+
 * 
 * <QFILE_TUPLE_VALUE_HEADER>
 * +-----------------------------------------------------------------------+
 * |      1 |      2 |      3 |      4 |      5 |      6 |      7 |      8 |
 * +-----------------------------------------------------------------------+ 
 * | QFILE_TUPLE_VALUE_FLAG_OFFSET     | QFILE_TUPLE_VALUE_LENGTH_OFFSET   | 8byte
 * +-----------------------------------------------------------------------+
 * | QFILE_TUPLE_VALUE                                                     | QFILE_GET_TUPLE_VALUE_LENGTH ()
 * +-----------------------------------------------------------------------+
 */

/*-
 * Change to cause core dumps even in debug builds.
 * 
 *     int
 *     qdata_copy_db_value_to_tuple_value (...)
 *     {
 *       ...
 *   
 * (+) #if 0
 *     #if !defined(NDEBUG)
 *        ...
 *        memset (...);
 *     #endif
 * (+) #endif
 *     }
 * 
 */

public class RND2027 {
	static final String DB_URL = "jdbc:cubrid:192.168.2.206:33000:demodb:::";
	static final String DB_ID = "dba";
	static final String DB_PW = "";
	static final int TEST_COUNT = 3;

	public static void main(String[] args) {
		RND2027.TestPreparedStatement();
	}
	
	public static void TestPreparedStatement() {
		String ddl_sql[] = { "drop table if exists test", "create table test (c1 varchar, c2 int)",
				"drop table if exists com_organizationinfo",
				"create table com_organizationinfo (orgid varchar (35) primary key, parentorgid varchar (35), orgdepth int)",
				"insert into com_organizationinfo values ('987654321', null, 1)" };

		/* There is no issue with the SELECT statement. */
		String sql = "insert into test select orgid, row_number() over (order by orgdepth) rnum from com_organizationinfo a start with a.orgid = '987654321' connect by prior a.parentorgid = a.orgid";

		try {
			Class.forName("cubrid.jdbc.driver.CUBRIDDriver");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}

		try (Connection connection = DriverManager.getConnection(DB_URL, DB_ID, DB_PW)) {
			System.out.println("connection...");
			(new Scanner(System.in)).nextLine();
			
			for (int i = 0; i < ddl_sql.length; i++) {
				try (PreparedStatement preparedStatement = connection.prepareStatement(ddl_sql[i])) {
					preparedStatement.execute();
				}
			}

			try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
				for (int i = 0; i < TEST_COUNT; i++) {
					preparedStatement.execute(); /* or executeUpdate() */

					System.out.println(i + "-th completion");
					(new Scanner(System.in)).nextLine();
				}

				System.out.println("all completion");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
}

